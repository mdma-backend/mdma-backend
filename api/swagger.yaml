openapi: '3.0.2'
info:
  title: FoREST
  version: '1.0'
servers:
  - url: https://backend.mdma.haveachin.de/
  - url: http://localhost:8080

# ENDPOINTS ########################################################################

paths:

  /mesh-nodes/{uuid}:
    parameters:
      - $ref: "#/components/parameters/UUID"
    get:
      tags:
        - Mesh-Nodes
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeshNode"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

    put:
      tags:
        - Mesh-Nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutMeshNode"
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeshNode"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

    delete:
      tags:
        - Mesh-Nodes
      responses:
        204:
          description: OK.
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

  /mesh-nodes:
    get:
      tags:
        - Mesh-Nodes
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  $ref: "#/components/schemas/GetMeshNode"
        500:
          description: Internal Server Error.

    post:
      tags:
        - Mesh-Nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostMeshNode"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeshNode"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

  /mesh-nodes/{uuid}/data:
    parameters:
      - $ref: "#/components/parameters/UUID"
    post:
      tags:
        - Mesh-Nodes
        - Data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostData"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/GetSingleData"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

  /mesh-nodes/{uuid}/data-list:
    parameters:
      - $ref: "#/components/parameters/UUID"
    post:
      tags:
        - Mesh-Nodes
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PostData"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetSingleData"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

  /data/aggregated:
    get:
      tags:
        - Data
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: meshNodes
          in: query
          required: false
          description: if not given, all mesh nodes are considered
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UUID"
        - name: measuredStart
          in: query
          required: false
          description: if not given, all measurements up to now are considered
          schema:
            type: string
            format: date-time
        - name: measuredEnd
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sampleDuration
          in: query
          required: false
          description: mutually exclusive with sampleCount, but either sampleDuration or sampleCount must be given
          schema:
            type: string
            example: "4h12m3s"
            description: format is described here https://pkg.go.dev/time#example-ParseDuration.
        - name: sampleCount
          in: query
          required: false
          description: mutually exclusive with sampleDuration, but either sampleDuration or sampleCount must be given
          schema:
            type: integer
        - name: aggregateFunction
          in: query
          required: true
          schema:
            type: string
            enum:
              - range
              - count
              - minimum
              - maximum
              - sum
              - median
              - average
      description: If no parameter is given the latest value for each type is returned.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAggregatedData"
        204:
          description: No Content.
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.     

  /data:
    get:
      tags:
        - Data
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: meshNodes
          in: query
          required: false
          description: if not given, all mesh nodes are considered
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UUID"
        - name: measuredStart
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: measuredEnd
          in: query
          required: false
          schema:
            type: string
            format: date-time
      description: If no parameter is given the latest value for each type is returned.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetData"
        204:
          description: No Content.
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.   

  /data/{uuid}:
    parameters:
      - $ref: "#/components/parameters/UUID"
    get:
      tags:
        - Data
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSingleData"
        204:
          description: No Content.
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

    delete:
      tags:
        - Data
      responses:
        204:
          description: No Content.
        500:
          description: Internal Server Error.

  /data/types:
    get:
      tags:
        - Data
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
  
  /login:
    post:
      tags:
        - User-Accounts
        - Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400:
          description: Bad Request.
        401:
          description: Unauthorized.
        500:
          description: Internal Server Error.

  /logout:
    delete:
      tags:
        - User-Accounts
        - Login
      responses:
        200:
          description: OK.

  /accounts/users:
    get:
      tags:
        - User-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetUserAccount"
        500:
          description: Internal Server Error.

    post:
      tags:
        - User-Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUserAccount"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserAccount"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.
    
  /accounts/users/{id}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - User-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserAccount"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

    put:
      tags:
        - User-Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAccount"
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserAccount"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

    delete:
      tags:
        - User-Accounts
      responses:
        204:
          description: No Content.
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

  /accounts/users/{id}/change-password:
    post:
      tags:
        - User-Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
      responses:
        204:
          description: No Content.
        400:
          description: Bad Request.
        401:
          description: Unauthorized.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

  /accounts/services:
    get:
      tags:
        - Service-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetServiceAccount"
        500:
          description: Internal Server Error.

    post:
      tags:
        - Service-Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccount"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetServiceAccount"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.
    
  /accounts/services/{id}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Service-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetServiceAccount"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
    put:
      tags:
        - Service-Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccount"
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetServiceAccount"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
          
    delete:
      tags:
        - Service-Accounts
      responses:
        204:
          description: No Content.
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

  /accounts/services/{id}/refresh-token:
    parameters:
      - $ref: "#/components/parameters/ID"
    post:
      tags:
        - Service-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetServiceAccount"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

  /roles:
    get:
      tags:
        - Roles
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetRole"
        500:
          description: Internal Server Error.
    post:
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRole"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

  /roles/{id}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Roles
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRole"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
    put:
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRole"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.

    delete:
      tags:
        - Roles
      responses:
        204:
          description: No Content.
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
    
  /roles/permissions:
    get:
      tags:
        - Roles
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        500:
          description: Internal Server Error.

  /areas:
    get:
      tags:
        - Area
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"

  /areas/{id}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Area
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Area"
        400:
          description: Bad Request.
        404:
          description: Not Found.

  /mesh-node-updates:
    get:
      tags:
        - Updates
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetUpdate"
        500:
          description: Internal Server Error.

    post:
      tags:
        - Updates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update"
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUpdate"
        400:
          description: Bad Request.
        500:
          description: Internal Server Error.

  /mesh-node-updates/{id}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Updates
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUpdate"
        400:
          description: Bad Request.
        404:
          description: Not Found.
        500:
          description: Internal Server Error.
    
  /me:
    get:
      tags:
        - User-Accounts
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
        400:
          description: Bad Request.

# SCHEMAS ####################################################################################

components:
  schemas:
    UUID:
      type: string
      example: "0cc56633-05ae-4cc3-8f71-801f429caeca"
    
    ID:
      type: integer
      example: 1

    ResourceWithUUID:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ResourceWithID:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      
    Me:
      type: object
      properties:
        accountType:
          type: string
          example: user
        accountId:
          type: integer
          example: 1
        role:
          $ref: "#/components/schemas/GetRole"
      
    PasswordChange:
      type: object
      properties:
        password:
          type: string
          example: password123
    
    Credentials:
      type: object
      properties:
        username:
          type: string
          example: H4r4ldD3rH4ck3r
        password:
          type: string
          example: password123

    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        roleId:
          $ref: "#/components/schemas/ID"

    Update:
      type: object
      properties:
        data:
          type: string
          example: UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMgVsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms=
        version:
          type: string
          example: 1.0.0
      
    GetUpdate:
      allOf:
        - $ref: "#/components/schemas/Update"
      properties:
        id:
          $ref: "#/components/schemas/ID"
        createdAt:
          type: string
          format: date-time

    UserAccount:
      type: object
      properties:
        username:
          type: string
          example: H4r4ldD3rH4ck3r
        roleId:
          type: integer
          example: 42

    GetUserAccount:
      allOf:
        - $ref: "#/components/schemas/ResourceWithID"
        - $ref: "#/components/schemas/UserAccount"

    PostUserAccount:
      allOf:
        - $ref: "#/components/schemas/ResourceWithID"
        - $ref: "#/components/schemas/UserAccount"
      type: object
      properties:
        password:
          type: string
          example: changeme
    
    ServiceAccount:
      type: object
      properties:
        name:
          type: string
          example: Gateway1
        roleId:
          type: integer
          example: 42

    GetServiceAccount:
      allOf:
        - $ref: "#/components/schemas/ResourceWithID"
        - $ref: "#/components/schemas/ServiceAccount"

    Role:
      type: object
      properties:
        name:
          type: string
          example: "admin"
        permissions:
          type: array
          items:
            type: string
            example: mesh_node_create

    GetRole:
      allOf:
        - $ref: "#/components/schemas/ResourceWithID"
        - $ref: "#/components/schemas/Role"

    Permission:
      type: string
      example: sensor_data_read
        
    Area:
      type: object
      properties:
        areaId:
          $ref: "#/components/schemas/ID"
        meshNodeUUIDs:
          type: array
          items:
            $ref: "#/components/schemas/UUID"

    MeshNode:
      type: object
      properties:
        updateId:
          $ref: "#/components/schemas/ID"
        latitude:
          type: number
          example: 49.127327
        longitude:
          type: number
          example: 9.264715

    GetMeshNode:
      allOf:
        - $ref: "#/components/schemas/ResourceWithUUID"
        - $ref: "#/components/schemas/MeshNode"

    PostMeshNode:
      allOf:
        - type: object
          properties:
            uuid:
              $ref: "#/components/schemas/UUID"
        - $ref: "#/components/schemas/MeshNode"

    PutMeshNode:
      $ref: "#/components/schemas/MeshNode"

    GetData:
      type: object
      properties:
        type:
          type: string
          example: "temperature"
        data:
          type: array
          items:
            type: object
            properties:
              mesh-nodeUUID:
                type: string
                format: uuid
                example: "f858ff4f-7315-4d66-938d-8bd871e3e216"
              measurements:
                type: array
                items:
                  type: object
                  properties:
                    UUID:
                      $ref: "#/components/schemas/UUID"
                    measuredAt:
                      type: string
                      format: date-time
                    value:
                      type: string
                      example: "23.23423"

    GetAggregatedData:
      type: object
      properties:
        aggregationFunction:
          type: string
          example: "average"
        type:
          type: string
          example: "temperature"
        meshNodeUUIDs:
          type: array
          items:
            $ref: "#/components/schemas/UUID"
        samples:
          type: array
          items:
            type: object
            properties:
              firstMeasurementAt:
                type: string
                format: date-time
              lastMeasurementAt:
                type: string
                format: date-time
              value:
                type: string
                example: "23.23423"

    SingleData:
      type: object
      properties:
        measuredAt:
          type: string
          format: date-time
        type:
          type: string
          example: "temperature"
        value:
          type: string
          example: "23.23423"

    PostData:
      $ref: "#/components/schemas/SingleData"

    GetSingleData:
      allOf:
        - $ref: "#/components/schemas/SingleData"
      properties:
        id:
          $ref: "#/components/schemas/ID"
        createdAt:
          type: string
          format: date-time

  parameters:
    UUID:
      name: uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    ID:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"

